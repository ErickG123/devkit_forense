name: Build & Release Forensic CLI

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m venv venv
          .\venv\Scripts\activate
          pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      - name: Build executable
        run: |
          .\venv\Scripts\activate
          pyinstaller --onefile --name forensic-cli --console --add-data "src/core;core" --add-data "src/api;api" src/cli/main.py

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: forensic-cli-exe
          path: dist/forensic-cli.exe

  release:
    needs: build-windows
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code with full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag and increment version based on commits
        id: get_tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$LATEST_TAG" ]; then
              NEW_MAJOR=0
              NEW_MINOR=0
              NEW_PATCH=1
              NEW_TAG="v$NEW_MAJOR.$NEW_MINOR.$NEW_PATCH"
              echo "No existing tag found. Starting with $NEW_TAG"
          else
              echo "Latest tag: $LATEST_TAG"
              VERSION=${LATEST_TAG#v}
              IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
              MAJOR=${VERSION_PARTS[0]:-0}
              MINOR=${VERSION_PARTS[1]:-0}
              PATCH=${VERSION_PARTS[2]:-0}

              COMMITS=$(git log $LATEST_TAG..HEAD --pretty=%B)

              if echo "$COMMITS" | grep -q "\[major\]"; then
                  NEW_MAJOR=$((MAJOR + 1))
                  NEW_MINOR=0
                  NEW_PATCH=0
              elif echo "$COMMITS" | grep -q "\[minor\]"; then
                  NEW_MAJOR=$MAJOR
                  NEW_MINOR=$((MINOR + 1))
                  NEW_PATCH=0
              elif echo "$COMMITS" | grep -q "\[patch\]"; then
                  NEW_MAJOR=$MAJOR
                  NEW_MINOR=$MINOR
                  NEW_PATCH=$((PATCH + 1))
              else
                  NEW_MAJOR=$MAJOR
                  NEW_MINOR=$MINOR
                  NEW_PATCH=$((PATCH + 1))
              fi

              NEW_TAG="v$NEW_MAJOR.$NEW_MINOR.$NEW_PATCH"
          fi

          echo "New tag: $NEW_TAG"
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT

      - name: Create and push tag if not exists
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          if git rev-parse "refs/tags/${{ steps.get_tag.outputs.new_tag }}" >/dev/null 2>&1; then
            echo "Tag ${{ steps.get_tag.outputs.new_tag }} already exists. Skipping creation."
          else
            git tag ${{ steps.get_tag.outputs.new_tag }}
            git push origin ${{ steps.get_tag.outputs.new_tag }}
          fi

      - name: Download built artifact
        uses: actions/download-artifact@v4
        with:
          name: forensic-cli-exe
          path: ./dist/exe

      - name: Check if release exists
        id: check_release
        run: |
          if gh release view ${{ steps.get_tag.outputs.new_tag }} >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release if not exists
        if: steps.check_release.outputs.exists == 'false'
        run: |
          gh release create ${{ steps.get_tag.outputs.new_tag }} ./dist/exe/forensic-cli.exe \
            --title "Forensic CLI ${{ steps.get_tag.outputs.new_tag }}" \
            --notes "Automated release from main branch merge. Commit: ${{ github.sha }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python for PyPI upload
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Generate Changelog
        run: |
          python generate_changelog.py
          cat README.md CHANGELOG.md > README_WITH_CHANGELOG.md
        
      - name: Deploy GitHub Pages (Docs + Changelog)
        uses: peaceiris/actions-gh-pages@v3.9.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          publish_branch: gh-pages

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build Python package
        run: python -m build --outdir dist/pypi

      - name: Publish to TestPyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TESTPYPI_TOKEN }}
        run: twine upload --repository testpypi dist/pypi/* --verbose
